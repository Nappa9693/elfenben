// Generated by Elfenben v1.0.14
require("./require");
var readline = require("readline"),
    ls = require("../lib/ls"),
    prefix = "elfenben> ",
    vm = require("vm");
var code = "";
function getOpenParenCount(codeString) {
    let result = codeString.match(/\(/g);
    return ((result === null) ?
        0 :
        (result).length);
}
function getCloseParenCount(codeString) {
    let result = codeString.match(/\)/g);
    return ((result === null) ?
        0 :
        (result).length);
}
function getPromptPrefix(openParens,closeParens) {
    let count = (openParens - closeParens);
    return "...".repeat(count);
}
exports.runrepl = function() {
    var rl = readline.createInterface(process.stdin,process.stdout);
    rl.on('line',function(line) {
        (function() {
        try {
            code = [code,line].join('');
            let openParenCount = getOpenParenCount(code);
            let closeParenCount = getCloseParenCount(code);
            return ((openParenCount === closeParenCount) ?
                (function() {
                    var l = ls._compile(code);
                    console.log(vm.runInThisContext(l));
                    code = "";
                    prefix = "elfenben> ";
                })() :
                (function() {
                    prefix = ["elfenben>",getPromptPrefix(openParenCount,closeParenCount)," "].join('');
                    code = [code," "].join('');
                })());

        } catch (e) {
        return (function(err) {
            return (function() {
                code = "";
                prefix = "elfenben> ";
                return console.log(err);
            })();
        })(e);
        }
        })();
        rl.setPrompt(prefix,prefix.length);
        return rl.prompt();
    });
    rl.on('close',function() {
        console.log("Bye!");
        return process.exit(0);
    });
    console.log([prefix,'Elfenben REPL v',ls.version].join(''));
    rl.setPrompt(prefix,prefix.length);
    return rl.prompt();
};
