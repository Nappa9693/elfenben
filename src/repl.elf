;; A very simple REPL written in Elfenben
(require "./require")
(var readline (require "readline")
     ls (require "../lib/ls")
     prefix "elfenben> "
     vm (require "vm"))
     
(var code "")

(function getOpenParenCount (codeString)
  (let result (codeString.match /\(/g))
  (if (null? result)
    0
    (.length result)))
  
(function getCloseParenCount (codeString)
  (let result (codeString.match /\)/g))
  (if (null? result)
    0
    (.length result)))
    
(function getPromptPrefix (openParens closeParens)
  (let count (- openParens closeParens))
  ("...".repeat count))

(set exports.runrepl
  (function ()
    (var rl (readline.createInterface process.stdin process.stdout))
    (rl.on 'line'
      (function (line)
        (try
          (set code (str code line))
          (let openParenCount (getOpenParenCount code))
          (let closeParenCount (getCloseParenCount code))
        
          (if (= openParenCount closeParenCount)
            (do
              (var l (ls._compile code))
              (console.log (vm.runInThisContext l))
              (set code "")
              (set prefix "elfenben> "))
            (do   
              (set prefix (str "elfenben>" (getPromptPrefix openParenCount closeParenCount) " "))
              (set code (str code " "))))
          (function (err)
            (do
              (set code "")
              (set prefix "elfenben> ")
              (console.log err))))
        (rl.setPrompt prefix prefix.length)
        (rl.prompt)))
    (rl.on 'close'
      (function ()
        (console.log "Bye!")
        (process.exit 0)))
    (console.log (str prefix 'Elfenben REPL v' ls.version))
    (rl.setPrompt prefix prefix.length)
    (rl.prompt)))

